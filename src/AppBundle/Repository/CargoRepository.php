<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Cargo;

/**
 * CargoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CargoRepository extends \Doctrine\ORM\EntityRepository
{
    public function agregarCargo($data)
    {
        try{
            $em = $this->getEntityManager();
            $cargo = new Cargo();
            $cargo->setNombre($data['nombre']);
            $cargo->setFuncion($data['funcion']);
            $cargo->setIsServicio($data['servicio']);

            $tipoContrato = $em->getRepository('AppBundle:TipoContrato')->find($data['tipoContrato']);
            $cargo->setTipoContrato($tipoContrato);

            $em->persist($cargo);
            $em->flush();
            $msg = $cargo;

        }catch (\Exception $e)
        {
            if(strpos($e->getMessage() , 'Duplicate entry') > 0)
            {
                $msg = 'El concepto ya existe, no se puede agregar';
            }
            else
            {
                $msg = 'Se produjo un error al insertar el concepto';
            }
        }
        return $msg;
    }

    public function modificarCargo($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $cargo = $em->getRepository('AppBundle:Cargo')->find($data['idCargo']);

            if (!empty($cargo)) {
                $cargo->setNombre($data['nombre']);
                $cargo->setFuncion($data['funcion']);
                $cargo->setIsServicio($data['servicio']);

                $tipoContrato = $em->getRepository('AppBundle:TipoContrato')->find($data['tipoContrato']);
                $cargo->setTipoContrato($tipoContrato);

                $em->flush();
                $msg = $cargo;
            } else {
                $msg = $cargo;
            }

        }catch (\Exception $e)
        {
            $msg = 'Se produjo un error al modificar el concepto';
        }

        return $msg;
    }

    public function eliminarCargo($id)
    {
        try
        {
            $em = $this->getEntityManager();
            $cargo = $em->getRepository('AppBundle:Cargo')->find($id);

            if (!empty($cargo)) {
                $em->remove($cargo);
                $em->flush();
                $msg = $cargo;
            } else {
                $msg = $cargo;
            }

        } catch (\Exception $e) {

            if (strpos($e->getMessage(), 'foreign key') > 0) {
                $msg = 'Existen contratos asociados a este concepto, no se puede eliminar';
            } else {
                $msg = 'Se produjo un error al eliminar el concepto';
            }
        }
        return $msg;
    }

}
