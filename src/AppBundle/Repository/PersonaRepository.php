<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Persona;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * PersonaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PersonaRepository extends \Doctrine\ORM\EntityRepository
{
    public function localizarPersona($data)
    {
        try {
            $em = $this->getEntityManager();

            $busqueda = $em->getRepository('AppBundle:Persona')->findBy(array('carnetIdentidad' => $data['carnetIdentidad']));

            return count($busqueda) === 0 ? 'No se encontraron registros en esta bÃºsqueda' : $busqueda;

        } catch (\Exception $e) {

            return 'Se produjo un error al localizar la persona';
        }
    }

    public function localizarDirector($carnetIdentidad)
    {
        try {
            $em = $this->getEntityManager();

            $busqueda = $em->getRepository('AppBundle:Persona')->findBy(array('carnetIdentidad' => $carnetIdentidad));

            return count($busqueda) === 0 ? '404' : $busqueda[0]->nombreCompleto();

        } catch (\Exception $e) {

            return 'Se produjo un error al localizar la persona';
        }
    }

    public function localizarPersonaSelect($carnetIdentidad)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT p.nombre, p.primerApellido, p.segundoApellido
                FROM AppBundle:Persona p
                WHERE p.carnetIdentidad =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $carnetIdentidad);

        return $query->getResult();

    }

    public function personaConceptos($carnetIdentidad)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT c.id, c.nombre
                FROM AppBundle:Persona p
                JOIN p.personaCargos c
                WHERE p.carnetIdentidad =:p1
                AND c.isServicio =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $carnetIdentidad);
        $query->setParameter('p2', false);

        return $query->getResult();

    }

    public function personaServicios($carnetIdentidad)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT s.id, s.nombre
                FROM AppBundle:Persona p
                JOIN p.personaServicios s
                WHERE p.carnetIdentidad =:p1
                AND s.isServicio =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $carnetIdentidad);
        $query->setParameter('p2', true);

        return $query->getResult();

    }

    public function agregarPersona($data)
    {
        try {
            $em = $this->getEntityManager();
            $persona = new Persona();
            $persona->setCarnetIdentidad($data['cI']);
            $persona->setNombre($data['nombre']);
            $persona->setPrimerApellido($data['primerApellido']);
            $persona->setSegundoApellido($data['segundoApellido']);
            $persona->setDireccion($data['direccion']);
            $persona->setAlias($data['alias']);
            $persona->setTelefono($data['telefono']);
            $persona->setIsNIT($data['nit']);
            $persona->setIsPA($data['isPA']);
            $persona->setIsTCP($data['isTCP']);
            $persona->setNoLicencia($data['noLicencia']);
            $persona->setTituloLicencia($data['tituloLicencia']);
            $persona->setNoCuentaCUP($data['noCuentaCUP']);
            $persona->setNoCuentaCUC($data['noCuentaCUC']);
            $persona->setNoSucursal($data['noSucursal']);
            $persona->setNoLicenciaSanitaria($data['noLicenciaSanitaria']);
            $persona->setNoRegistroCreador($data['noRegistro']);

            if ($data['profesion']) {
                $profesion = $em->getRepository('AppBundle:Profesion')->find($data['profesion']);
                $persona->setProfesion($profesion);
            }

            if ($data['banco']) {
                $banco = $em->getRepository('AppBundle:Banco')->find($data['banco']);
                $persona->setBanco($banco);
            }

            $ciudadania = $em->getRepository('AppBundle:Ciudadania')->find($data['ciudadania']);
            $persona->setCiudadania($ciudadania);

            $sexo = $em->getRepository('AppBundle:Sexo')->find($data['sexo']);
            $persona->setSexo($sexo);

            if ($data['isPA'] === '1') {

                $personaConceptos = new ArrayCollection();

                foreach ($data['cargos'] as $concepto) {
                    $personaConceptos[] = $em->getRepository('AppBundle:Cargo')->find($concepto);
                }
                $persona->setPersonaCargos($personaConceptos);
            }

            if ($data['isTCP'] === '1') {

                $personaServicios = new ArrayCollection();

                foreach ($data['servicios'] as $servicio) {
                    $personaServicios[] = $em->getRepository('AppBundle:Cargo')->find($servicio);
                }
                $persona->setPersonaServicios($personaServicios);
            }

            $em->persist($persona);
            $em->flush();
            $msg = $persona;

        } catch (\Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'La persona ya existe, no se puede agregar';
            } else {
                $msg = $e->getMessage();
            }
        }
        return $msg;
    }

    public function modificarPersona($data)
    {
        try {
            $em = $this->getEntityManager();
            $persona = $em->getRepository('AppBundle:Persona')->findOneBy(array('carnetIdentidad' => $data['cI']));

            if (!empty($persona)) {

                $persona->setNombre($data['nombre']);
                $persona->setPrimerApellido($data['primerApellido']);
                $persona->setSegundoApellido($data['segundoApellido']);
                $persona->setDireccion($data['direccion']);
                $persona->setAlias($data['alias']);
                $persona->setTelefono($data['telefono']);
                $persona->setIsNIT($data['nit']);
                $persona->setIsPA($data['isPA']);
                $persona->setIsTCP($data['isTCP']);
                $persona->setNoLicencia($data['noLicencia']);
                $persona->setTituloLicencia($data['tituloLicencia']);
                $persona->setNoCuentaCUP($data['noCuentaCUP']);
                $persona->setNoCuentaCUC($data['noCuentaCUC']);
                $persona->setNoSucursal($data['noSucursal']);
                $persona->setNoLicenciaSanitaria($data['noLicenciaSanitaria']);
                $persona->setNoRegistroCreador($data['noRegistro']);

                if ($data['profesion']) {
                    $profesion = $em->getRepository('AppBundle:Profesion')->find($data['profesion']);
                    $persona->setProfesion($profesion);
                }

                if ($data['banco']) {
                    $banco = $em->getRepository('AppBundle:Banco')->find($data['banco']);
                    $persona->setBanco($banco);
                }

                $ciudadania = $em->getRepository('AppBundle:Ciudadania')->find($data['ciudadania']);
                $persona->setCiudadania($ciudadania);

                $sexo = $em->getRepository('AppBundle:Sexo')->find($data['sexo']);
                $persona->setSexo($sexo);

                if ($data['isPA']) {
                    foreach ($persona->getPersonaCargos() as $cargo) {
                        $persona->removePersonaCargo($cargo);
                    }
                    if (is_array($data['cargos'])) {

                        $personaCargos = new ArrayCollection();

                        foreach ($data['cargos'] as $cargo) {
                            $personaCargos[] = $em->getRepository('AppBundle:Cargo')->findOneBy(array('nombre' => $cargo));
                        }
                        $persona->setPersonaCargos($personaCargos);
                    }
                } else {
                    foreach ($persona->getPersonaCargos() as $cargo) {
                        $persona->removePersonaCargo($cargo);
                    }
                }

                if ($data['isTCP']) {
                    foreach ($persona->getPersonaServicios() as $servicio) {
                        $persona->removePersonaServicio($servicio);
                    }
                    if (is_array($data['servicios'])) {

                        $personaServicios = new ArrayCollection();

                        foreach ($data['servicios'] as $servicio) {
                            $personaServicios[] = $em->getRepository('AppBundle:Cargo')->findOneBy(array('nombre' => $servicio));
                        }
                        $persona->setPersonaServicios($personaServicios);
                    }
                }else {
                    foreach ($persona->getPersonaServicios() as $servicio) {
                        $persona->removePersonaServicio($servicio);
                    }
                }

                $em->flush();
                $msg = $persona;
            } else {
                $msg = $persona;
            }

        } catch (\Exception $e) {
            $msg = $e->getMessage();
        }

        return $msg;
    }

    public function masterDeletePersona($user,$idPersona)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            //agregar las generales de un proyecto
            $persona = $this->eliminarPersona($idPersona);

            if (is_string($persona)) {
                $em->rollback();
                return $persona;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Eliminar persona',
                'descripcion' => 'Se elimino la persona: ' . $persona->nombreCompleto()
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);

            $em->commit();
            $msg = 'ok';


        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al eliminar la persona';
        }
        return $msg;
    }

    public function eliminarPersona($id)
    {
        try
        {
            $em = $this->getEntityManager();
            $persona = $em->getRepository('AppBundle:Persona')->find($id);

            if (!empty($persona)) {
                $em->remove($persona);
                $em->flush();
                $msg = $persona;
            } else {
                $msg = $persona;
            }

        } catch (\Exception $e) {

            if (strpos($e->getMessage(), 'foreign key') > 0) {
                $msg = 'Existen contratos asociados a esta persona, no se puede eliminar';
            } else {
                $msg = 'Se produjo un error al eliminar la persona seleccionada';
            }
        }
        return $msg;
    }

}
