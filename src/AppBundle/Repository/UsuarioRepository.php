<?php

namespace AppBundle\Repository;

use AppBundle\Entity\UsuarioClaveAnterior;
use DateTime;
use Symfony\Component\Security\Core\Encoder\BCryptPasswordEncoder;
use AppBundle\Entity\Usuario;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\VarDumper\Cloner\VarCloner;


/**
 * UsuarioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsuarioRepository extends \Doctrine\ORM\EntityRepository
{

    public function verificarPassword($passNew)
    {
        $resp = '';

        if (strlen($passNew) < 8) {
            $resp = 'La clave debe tener al menos 8 caracteres';
        } elseif (!preg_match('`[a-z]`', $passNew)) {
            $resp = 'La clave debe tener al menos una letra minúscula';
        } elseif (!preg_match('`[A-Z]`', $passNew)) {
            $resp = 'La clave debe tener al menos una letra mayúscula';
        } elseif (!preg_match('`[0-9]`', $passNew)) {
            $resp = 'La clave debe tener al menos un caracter numérico';
        }

        if ($resp !== '') {
            return $resp;
        }

        return 'ok';
    }

    public function verificarPasswordAnterior($idUsuario, $passNew)
    {
        try {
            $em = $this->getEntityManager();
            $user = $em->getRepository('AppBundle:Usuario')->find($idUsuario);

            if (($user !== null) && password_verify($passNew, $user->getPassword())) {
                $msg = true;
            } else {
                $msg = false;
            }

        } catch (\Exception $e) {

            $msg = false;
        }
        return $msg;

    }

    public function verificarTiempoPassword($idUsuario)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT u.fechaFinClave
                FROM AppBundle:Usuario u
                WHERE u.isActive = :p1 
                AND u.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idUsuario);

        /** @noinspection OneTimeUseVariablesInspection */
        $resp = $query->getResult();

        return $resp;
    }

    public function cambiarPassword($idUsuario, $passNew)
    {
        try {
            $actual = new DateTime('now');
            $final = $actual->modify('+45 day');
            $fechaFinal = $final->format('Y-m-d');

            $em = $this->getEntityManager();
            $user = $em->getRepository('AppBundle:Usuario')->find($idUsuario);

            $encoder = new BCryptPasswordEncoder(12);
            $passNew = $encoder->encodePassword($passNew, null);
            $user->setPassword($passNew);
            $user->setIsActive(true);
            $user->setFechaFinClave(new DateTime($fechaFinal));

            $em->persist($user);
            $em->flush();
            $msg = $user;

        } catch (\Exception $e) {

            $msg = 'Se produjo un error al cambiar la contraseña';

        }
        return $msg;

    }

    public function agregarUsuario($data)
    {
        try {
            $actual = new DateTime('now');
            $final = $actual->modify('+45 day');
            $fechaFinal = $final->format('Y-m-d');

            $em = $this->getEntityManager();
            $user = new Usuario();
            $user->setUsername($data['username']);
            $user->setNombre($data['nombre']);
            $user->setPrimerApellido($data['primerApellido']);
            $user->setSegundoApellido($data['segundoApellido']);
            $user->setFechaFinClave(new DateTime($fechaFinal));

            $encoder = new BCryptPasswordEncoder(12);
            $encoded = $encoder->encodePassword($data['clave'], null);
            $user->setPassword($encoded);

            $usuarioRoles = new ArrayCollection();

            foreach ($data['roles'] as $role) {
                $usuarioRoles[] = $em->getRepository('AppBundle:Role')->find($role);
            }
            $user->setUsuarioRoles($usuarioRoles);

            $usuarioModulos = new ArrayCollection();

            foreach( $data['modulos'] as $modulo)
            {
                $usuarioModulos[] = $em->getRepository('AppBundle:NivelAcceso')->find($modulo);
            }
            $user->setUsuarioNivelesAccesos($usuarioModulos);

            $em->persist($user);
            $em->flush();
            $msg = $user;

        } catch (\Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El Usuario ya existe, no se puede agregar';
            } else {
                $msg = $e->getMessage();
            }
        }
        return $msg;
    }

    public function eliminarUsuario($id)
    {
        try {
            $em = $this->getEntityManager();
            $user = $em->getRepository('AppBundle:Usuario')->find($id);
            $user->setIsActive(0);

            $em->persist($user);
            $em->flush();
            $msg = $user;

        } catch (\Exception $e) {

            $msg = 'Se produjo un error al eliminar el Usuario';

        }
        return $msg;
    }

    public function modificarUsuario($data)
    {
        try {
            $em = $this->getEntityManager();
            $user = $em->getRepository('AppBundle:Usuario')->find($data['idUsuario']);

            if (!empty($user)) {

                $user->setUsername($data['username']);
                $user->setNombre($data['nombre']);
                $user->setPrimerApellido($data['primerApellido']);
                $user->setSegundoApellido($data['segundoApellido']);

                $usuarioRoles = new ArrayCollection();

                foreach ($data['roles'] as $role) {
                    $usuarioRoles[] = $em->getRepository('AppBundle:Role')->findOneBy(array('nombre' => $role));
                }
                $user->setUsuarioRoles($usuarioRoles);

                $usuarioModulos = new ArrayCollection();

                foreach( $data['modulos'] as $modulo)
                {
                    $usuarioModulos[] = $em->getRepository('AppBundle:NivelAcceso')->findOneBy(array('nivel' => $modulo));
                }
                $user->setUsuarioNivelesAccesos($usuarioModulos);

                $em->persist($user);
                $em->flush();
                $msg = $user;
            } else {
                $msg = $user;
            }

        } catch (\Exception $e) {
            $msg = 'Se produjo un error al modificar el Usuario';
        }

        return $msg;
    }

    public function desactivarUsuario($idUsuario)
    {
        try {
            $em = $this->getEntityManager();
            $user = $em->getRepository('AppBundle:Usuario')->find($idUsuario);

            if (!empty($user)) {

                $user->setIsActive(false);

                $em->persist($user);
                $em->flush();
                $msg = $user;
            } else {
                $msg = $user;
            }

        } catch (\Exception $e) {
            $msg = 'Se produjo un error al desactivar el Usuario';
        }

        return $msg;
    }
}
