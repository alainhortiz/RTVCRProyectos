<?php

namespace AppBundle\Repository;

use AppBundle\Entity\ProyectoPersonaReporte;
use DateTime;
use AppBundle\Entity\ProyectoPersonaCargo;
use AppBundle\Entity\Reporte;
use Exception;

/**
 * ReporteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReporteRepository extends \Doctrine\ORM\EntityRepository
{
    public function masterAgregarReporte($data, $user, $reportados)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            //agregar reporte
            $reporte = $this->agregarReporte($data);

            if (is_string($reporte)) {
                $em->rollback();
                return $reporte;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Agregar reporte de un proyecto',
                'descripcion' => 'Se agregó el reporte no. ' . $reporte->getNoReporte() . ' del proyecto: ' . $reporte->getProyecto()->getTitulo()
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);

            if ($reportados) {
                $reportadosPersonas = $this->agregarReportesPersonas($data['idProyecto'],$reporte, $reportados);
                if (is_string($reportadosPersonas)) {
                    $em->rollback();
                    return $reportadosPersonas;
                }

                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Agregar las personas de un reporte',
                    'descripcion' => 'Se agregaron las personas del reporte no. ' . $reporte->getNoReporte() . ' del proyecto: ' . $reporte->getProyecto()->getTitulo()
                );
                $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);
            }

            $em->commit();
            $msg = 'ok';


        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al registrar el reporte';
        }
        return $msg;
    }

    public function agregarReporte($data)
    {
        try {
            $em = $this->getEntityManager();

            //Obtener el ultimo no. de Reporte
            $noReporte = $this->lastNoReporte($data['idProyecto']);

            if ($noReporte === null) {
                $noReporte = 0;
            }

            //Concluir el reporte anterior
            if ($noReporte >= 1) {
                $reporteAnterior = $em->getRepository('AppBundle:Reporte')->findOneBy(array('proyecto' => $data['idProyecto'], 'noReporte' => $noReporte));
                if (!empty($reporteAnterior)) {
                    $reporteAnterior->setIsConcluido(true);
                    $em->flush();
                } else {
                    return $reporteAnterior;
                }

            }

            ++$noReporte;

            $reporte = new Reporte();
            $reporte->setNoReporte($noReporte);
            $reporte->setFechaReporte(new DateTime($data['fecha']));
            $reporte->setCantidadProgramas($data['totalProgramas']);

            $proyecto = $em->getRepository('AppBundle:Proyecto')->find($data['idProyecto']);
            $reporte->setProyecto($proyecto);

            $em->persist($reporte);
            $em->flush();
            $msg = $reporte;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El reporte ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al registrar el reporte';
            }
        }
        return $msg;
    }

    public function agregarReportesPersonas($idProyecto,$reporte, $reportados)
    {
        try {
            $em = $this->getEntityManager();

            foreach ($reportados as $reportado) {

                $presupuestoACobrar = str_replace(',', '', $reportado['aCobrar']);
                $ingreso = str_replace(',', '', $reportado['ingreso']);
                $porciento = str_replace(',', '', $reportado['porciento']);

                $reportePersona = new ProyectoPersonaReporte();
                $reportePersona->setReporte($reporte);
                $reportePersona->setCantidadProgramas($reportado['cantidadProgramas']);
                $reportePersona->setIngreso($ingreso);
                $reportePersona->setPorciento($porciento);
                $reportePersona->setPresupuestoACobrar($presupuestoACobrar);

                $personaCargo = $em->getRepository('AppBundle:ProyectoPersonaCargo')->find($reportado['personaCargo']);
                $reportePersona->setProyectoPersonaCargo($personaCargo);

                $noSuplemento = $this->cantidadReportePersona($personaCargo->getId(), $idProyecto);
                $reportePersona->setNoSuplemento($noSuplemento);

                if (!empty($personaCargo)) {
                    if ($reporte->getNoReporte() === 1) {
                        $totalACobrar = (float)$personaCargo->getPresupuestoTotal();
                        $preupuestoRestante = $totalACobrar - $ingreso;
                    }else {
                        $noReporte = $reporte->getNoReporte();
                        --$noReporte;
                        $presupuestoRestanteAnterior = $this->presupuestoRestante($personaCargo->getId(),$idProyecto,$noReporte);
                        if (empty($presupuestoRestanteAnterior)) {
                            $totalACobrar = (float)$personaCargo->getPresupuestoTotal();
                            $preupuestoRestante = $totalACobrar - $ingreso;
                        }else{
                            $preupuestoRestante = $presupuestoRestanteAnterior[0]['presupuestoRestante'] - $ingreso;
                        }
                    }
                    $personaCargo->setPresupuestoRestante($preupuestoRestante);
                } else {
                    $preupuestoRestante = $ingreso;
                }

                $reportePersona->setPresupuestoRestante($preupuestoRestante);

                $em->persist($reportePersona);

            }
            $em->flush();
            $msg = $reportePersona;

        } catch (Exception $e) {

            $msg = $e->getMessage();
        }
        return $msg;
    }

    public function masterModificarReporte($data, $user, $reportados)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            //agregar reporte
            $reporte = $this->modificarReporte($data);

            if (is_string($reporte)) {
                $em->rollback();
                return $reporte;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Modificar reporte de un proyecto',
                'descripcion' => 'Se modificó el reporte no. ' . $reporte->getNoReporte() . ' del proyecto: ' . $reporte->getProyecto()->getTitulo()
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);

            if ($reportados) {
                $reportadosPersonas = $this->modificarReportesPersonas($data['idProyecto'],$reporte, $reportados);
                if (is_string($reportadosPersonas)) {
                    $em->rollback();
                    return $reportadosPersonas;
                }

                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Modificar las personas de un reporte',
                    'descripcion' => 'Se modificaron las personas del reporte no. ' . $reporte->getNoReporte() . ' del proyecto: ' . $reporte->getProyecto()->getTitulo()
                );
                $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);
            }

            $em->commit();
            $msg = 'ok';


        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al modificar el reporte';
        }
        return $msg;
    }

    public function modificarReporte($data)
    {
        try {
            $em = $this->getEntityManager();

            $reporte = $em->getRepository('AppBundle:Reporte')->find($data['idReporte']);

            if (!empty($reporte)) {

                $reporte->setFechaReporte(new DateTime($data['fecha']));
                $reporte->setCantidadProgramas($data['totalProgramas']);

                $em->flush();
                $msg = $reporte;
            } else {
                $msg = $reporte;
            }

        } catch (Exception $e) {

            $msg = 'Se produjo un error al modificar el reporte';

        }
        return $msg;
    }

    public function modificarReportesPersonas($idProyecto,$reporte, $reportados)
    {
        try {
            $em = $this->getEntityManager();

            $trabajaron = $em->getRepository('AppBundle:ProyectoPersonaReporte')->findBy(array('reporte' => $reporte));

            if (!empty($trabajaron)) {

                foreach ($trabajaron as $persona) {
                    $em->remove($persona);
                }

                $em->flush();

            }

            foreach ($reportados as $reportado) {

                $presupuestoACobrar = str_replace(',', '', $reportado['aCobrar']);
                $ingreso = str_replace(',', '', $reportado['ingreso']);
                $porciento = str_replace(',', '', $reportado['porciento']);

                $reportePersona = new ProyectoPersonaReporte();
                $reportePersona->setReporte($reporte);
                $reportePersona->setCantidadProgramas($reportado['cantidadProgramas']);
                $reportePersona->setIngreso($ingreso);
                $reportePersona->setPorciento($porciento);
                $reportePersona->setPresupuestoACobrar($presupuestoACobrar);

                $personaCargo = $em->getRepository('AppBundle:ProyectoPersonaCargo')->find($reportado['personaCargo']);
                $reportePersona->setProyectoPersonaCargo($personaCargo);

                $noSuplemento = $this->cantidadReportePersona($personaCargo->getId(), $idProyecto);
                $reportePersona->setNoSuplemento($noSuplemento);

                if (!empty($personaCargo)) {
                    if ($reporte->getNoReporte() === 1) {
                        $totalACobrar = (float)$personaCargo->getPresupuestoTotal();
                        $preupuestoRestante = $totalACobrar - $ingreso;
                    }else {
                        $noReporte = $reporte->getNoReporte();
                        --$noReporte;
                        $presupuestoRestanteAnterior = $this->presupuestoRestante($personaCargo->getId(),$idProyecto,$noReporte);
                        if (empty($presupuestoRestanteAnterior)) {
                            $totalACobrar = (float)$personaCargo->getPresupuestoTotal();
                            $preupuestoRestante = $totalACobrar - $ingreso;
                        }else{
                            $preupuestoRestante = $presupuestoRestanteAnterior[0]['presupuestoRestante'] - $ingreso;
                        }
                        $personaCargo->setPresupuestoRestante($preupuestoRestante);
                    }
                } else {
                    $preupuestoRestante = $ingreso;
                }

                $reportePersona->setPresupuestoRestante($preupuestoRestante);

                $em->persist($reportePersona);
            }
            $em->flush();
            $msg = $reportePersona;

        } catch (Exception $e) {

            $msg = $e->getMessage();
        }
        return $msg;
    }

    public function lastNoReporte($idProyecto)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT MAX(r.noReporte) as noReporte
                FROM AppBundle:Reporte r
                INNER JOIN r.proyecto y
                WHERE y.id =' . $idProyecto;

        $query = $em->createQuery($dql);

        $result = $query->getResult();

        return $result[0]['noReporte'];

    }

    public function lastDateReporte($idProyecto,$noReporte)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT r.fechaReporte
                FROM AppBundle:Reporte r
                JOIN r.proyecto e
                WHERE r.noReporte =:p1
                AND e.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $noReporte);
        $query->setParameter('p2', $idProyecto);

        $result = $query->getResult();

        return $result[0]['fechaReporte'];

    }

    public function presupuestoRestante($idPersona,$idProyecto,$noReporte)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT r.presupuestoRestante
                FROM AppBundle:ProyectoPersonaReporte r
                JOIN r.proyectoPersonaCargo f
                JOIN r.reporte e
                JOIN e.proyecto g
                WHERE f.id =:p1
                AND e.noReporte =:p2
                AND g.id =:p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPersona);
        $query->setParameter('p2', $noReporte);
        $query->setParameter('p3', $idProyecto);

        return $query->getResult();

    }

    public function cantidadReportePersona($idPersona, $idProyecto)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(p) as cantidad
                FROM AppBundle:ProyectoPersonaReporte p
                JOIN p.proyectoPersonaCargo d
                JOIN p.reporte r
                JOIN r.proyecto e
                WHERE d.id =:p1
                AND e.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPersona);
        $query->setParameter('p2', $idProyecto);

        $total = $query->getResult();

        return $total[0]['cantidad'] + 1;

    }

    public function programasRestantes($idProyecto)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT SUM(r.cantidadProgramas) as cantidadProgramas
                FROM AppBundle:Reporte r
                JOIN r.proyecto g
                WHERE g.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idProyecto);

        return $query->getResult();

    }

}
