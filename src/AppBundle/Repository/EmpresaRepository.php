<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Empresa;
use DateTime;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * EmpresaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmpresaRepository extends \Doctrine\ORM\EntityRepository
{
    public function localizarEmpresa($data)
    {
        try {
            $em = $this->getEntityManager();

            $busqueda = $em->getRepository('AppBundle:Empresa')->findBy(array(
                'fonNombre' => metaphone(strtoupper($data['nombreEmpresa']), 5)));

            return count($busqueda) === 0 ? 'No se encontraron registros en esta bÃºsqueda' : $busqueda;

        } catch (\Exception $e) {

            return 'Se produjo un error al localizar la empresa';
        }
    }

    public function agregarEmpresa($data)
    {
        try {
            $em = $this->getEntityManager();
            $empresa = new Empresa();
            $empresa->setNombre(strtoupper($data['nombre']));
            $empresa->setNit($data['nit']);
            $empresa->setNoAutorizadaResolucion($data['noAutorizada']);
            if ($data['fechaAutorizada']) {
                $empresa->setFechaNoAutorizadaResolucion(new DateTime ($data['fechaAutorizada']));
            }else{
                $empresa->setFechaNoAutorizadaResolucion(new DateTime ('01-01-0001'));
            }
            $empresa->setCargoNoAutorizadaResolucion($data['cargoAutorizada']);
            $empresa->setNoConstituidaResolucion($data['noConstituida']);
            if ($data['fechaConstituida']) {
                $empresa->setFechaNoConstituidaResolucion(new DateTime ($data['fechaConstituida']));
            }else{
                $empresa->setFechaNoConstituidaResolucion(new DateTime ('01-01-0001'));
            }
            $empresa->setCargoNoConstituidaResolucion($data['cargoConstituida']);
            $empresa->setNoCuentaCUC($data['noCuentaCUC']);
            $empresa->setNoSucursalCUC($data['noSucursalCUC']);
            $empresa->setNoCuentaCUP($data['noCuentaCUP']);
            $empresa->setNoSucursalCUP($data['noSucursalCUP']);
            $empresa->setNombreRepresentante($data['nombreRepresentante']);
            $empresa->setCargoRepresentante($data['cargoRepresentante']);
            $empresa->setDireccion($data['direccion']);

            if ($data['bancoCUC']) {
                $bancoCUC = $em->getRepository('AppBundle:Banco')->find($data['bancoCUC']);
                $empresa->setBancoCUC($bancoCUC);
            }

            if ($data['bancoCUP']) {
                $bancoCUP = $em->getRepository('AppBundle:Banco')->find($data['bancoCUP']);
                $empresa->setBancoCUP($bancoCUP);
            }

            $tipoEmpresa = $em->getRepository('AppBundle:TipoEmpresa')->find($data['tipoEmpresa']);
            $empresa->setTipoEmpresa($tipoEmpresa);

            if ($data['isConcepto'] === '1') {

                $empresaConceptos = new ArrayCollection();

                foreach ($data['cargos'] as $concepto) {
                    $empresaConceptos[] = $em->getRepository('AppBundle:Cargo')->find($concepto);
                }
                $empresa->setEmpresaCargos($empresaConceptos);
            }

            if ($data['isServicio'] === '1') {

                $empresaServicios = new ArrayCollection();

                foreach ($data['servicios'] as $servicio) {
                    $empresaServicios[] = $em->getRepository('AppBundle:Cargo')->find($servicio);
                }
                $empresa->setEmpresaServicios($empresaServicios);
            }

            $em->persist($empresa);
            $em->flush();
            $msg = $empresa;

        } catch (\Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'La empresa ya existe, no se puede agregar';
            } else {
                $msg = $e->getMessage();
            }
        }
        return $msg;
    }

    public function modificarEmpresa($data)
    {
        try {
            $em = $this->getEntityManager();
            $empresa = $em->getRepository('AppBundle:Empresa')->find($data['idEmpresa']);

            if (!empty($empresa)) {
                $empresa->setNombre(strtoupper($data['nombre']));
                $empresa->setNit($data['nit']);
                $empresa->setNoAutorizadaResolucion($data['noAutorizada']);
                if ($data['fechaAutorizada']) {
                    $empresa->setFechaNoAutorizadaResolucion(new DateTime ($data['fechaAutorizada']));
                }else{
                    $empresa->setFechaNoAutorizadaResolucion(new DateTime ('01-01-0001'));
                }
                $empresa->setCargoNoAutorizadaResolucion($data['cargoAutorizada']);
                $empresa->setNoConstituidaResolucion($data['noConstituida']);
                if ($data['fechaConstituida']) {
                    $empresa->setFechaNoConstituidaResolucion(new DateTime ($data['fechaConstituida']));
                }else{
                    $empresa->setFechaNoConstituidaResolucion(new DateTime ('01-01-0001'));
                }
                $empresa->setCargoNoConstituidaResolucion($data['cargoConstituida']);
                $empresa->setNoCuentaCUC($data['noCuentaCUC']);
                $empresa->setNoSucursalCUC($data['noSucursalCUC']);
                $empresa->setNoCuentaCUP($data['noCuentaCUP']);
                $empresa->setNoSucursalCUP($data['noSucursalCUP']);
                $empresa->setNombreRepresentante($data['nombreRepresentante']);
                $empresa->setCargoRepresentante($data['cargoRepresentante']);
                $empresa->setDireccion($data['direccion']);

                if ($data['bancoCUC']) {
                    $bancoCUC = $em->getRepository('AppBundle:Banco')->find($data['bancoCUC']);
                    $empresa->setBancoCUC($bancoCUC);
                }

                if ($data['bancoCUP']) {
                    $bancoCUP = $em->getRepository('AppBundle:Banco')->find($data['bancoCUP']);
                    $empresa->setBancoCUP($bancoCUP);
                }

                $tipoEmpresa = $em->getRepository('AppBundle:TipoEmpresa')->find($data['tipoEmpresa']);
                $empresa->setTipoEmpresa($tipoEmpresa);

                if ($data['isConcepto']) {
                    foreach ($empresa->getEmpresaCargos() as $cargo) {
                        $empresa->removeEmpresaCargo($cargo);
                    }
                    if (is_array($data['cargos'])) {

                        $empresaCargos = new ArrayCollection();

                        foreach ($data['cargos'] as $cargo) {
                            $empresaCargos[] = $em->getRepository('AppBundle:Cargo')->findOneBy(array('nombre' => $cargo));
                        }
                        $empresa->setEmpresaCargos($empresaCargos);
                    }
                } else {
                    foreach ($empresa->getEmpresaCargos() as $cargo) {
                        $empresa->removeEmpresaCargo($cargo);
                    }
                }

                if ($data['isServicio']) {
                    foreach ($empresa->getEmpresaServicios() as $servicio) {
                        $empresa->removeEmpresaServicio($servicio);
                    }
                    if (is_array($data['servicios'])) {

                        $empresaServicios = new ArrayCollection();

                        foreach ($data['servicios'] as $servicio) {
                            $empresaServicios[] = $em->getRepository('AppBundle:Cargo')->findOneBy(array('nombre' => $servicio));
                        }
                        $empresa->setEmpresaServicios($empresaServicios);
                    }
                }else {
                    foreach ($empresa->getEmpresaServicios() as $servicio) {
                        $empresa->removeEmpresaServicio($servicio);
                    }
                }

                $em->flush();
                $msg = $empresa;
            } else {
                $msg = $empresa;
            }

        } catch (\Exception $e) {
            $msg = $e->getMessage();
        }

        return $msg;
    }

    public function masterDeleteEmpresa($user,$idEmpresa)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            //Eliminar empresa
            $empresa = $this->eliminarEmpresa($idEmpresa);

            if (is_string($empresa)) {
                $em->rollback();
                return $empresa;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Eliminar empresa',
                'descripcion' => 'Se elimino la empresa: ' . $empresa->getNombre()
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);

            $em->commit();
            $msg = 'ok';


        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al eliminar la empresa';
        }
        return $msg;
    }

    public function eliminarEmpresa($id)
    {
        try
        {
            $em = $this->getEntityManager();
            $empresa = $em->getRepository('AppBundle:Empresa')->find($id);

            if (!empty($empresa)) {
                $em->remove($empresa);
                $em->flush();
                $msg = $empresa;
            } else {
                $msg = $empresa;
            }

        } catch (\Exception $e) {

            if (strpos($e->getMessage(), 'foreign key') > 0) {
                $msg = 'Existen contratos asociados a esta empresa, no se puede eliminar';
            } else {
                $msg = 'Se produjo un error al eliminar la empresa seleccionada';
            }
        }
        return $msg;
    }

}
